% 8-30hz bandpass filter
% All signals will be filtered with a single command
% Input Shape: (n examples*1000)x3
% Output Shape: (n examples*1000)x3
% channel C4 is 3
% sample 2 is right for subject 1

clear
clc

% load data, change to subject number and check if it is T or E
load('CarB09E.mat');
fs = 250; % sampling frequency

% 8-30 Hz bandpass filter
signals_filtradas = bandpass(car, [8 30], fs);

% save filtered signals, change to subject number and check if
% it is T or E
save('FiltradasB9E.mat','signals_filtradas');

% % This is to plot the difference between the signal and its spectra with FFT
% subplot(2,1,1);
% c4 = car(1000:2000,3);
% plot(c4,'LineWidth',1);
% hold on
% c4_filtradas = signals_filtradas(1000:2000,3);
% plot(c4_filtradas,'LineWidth',1);
% grid;
% xlabel('Time');
% ylabel('Amplitude');
% legend('C4 CAR','C4 Band Pass 8Hz-30Hz');
% hold off
%
% % FFT
 [P1_1, f_1] = ×›ourierTransform(c4', fs);
 [P1_2, f_2] = FourierTransform(c4_filtradas', fs);
  subplot(2,1,2);
 plot(f_1, P1_1,'LineWidth',1);
 hold on % plot(f_2, P1_2,'LineWidth',1);
 title('Fast Fourier Transform');
 xlabel('Frequency');
 ylabel('Power');
 legend('C4 CAR','C4 Band Pass 8Hz-30Hz');
 axis([0 35 0 1.5]);
grid;
% %-------------------------------------------------- % % Functions % %-------------------------------------------------- % 
 function [P1, f] = FourierTransform(signal, fs)
 [f, signalsize]=size(signal);
 Y = fft(signal);
 % Calculate the bilateral spectrum P2. Next, calculate the
 % one-sided spectrum P1 based on P2 and the signal length of
 % uniform value L
 P2 = abs(Y/signalSize);
 P1 = P2(1:floor(signalSize/2+1));
 P1(2:end-1) = 2*P1(2:end-1);
 f = fs*(0:(signalSize/2))/signalSize;
 end